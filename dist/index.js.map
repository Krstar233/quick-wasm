{"version":3,"file":"index.js","sources":["../node_modules/.pnpm/promise-worker@2.0.1/node_modules/promise-worker/index.js","../src/index.ts"],"sourcesContent":["'use strict'\n\nvar messageIds = 0\n\nfunction onMessage (self, e) {\n  var message = e.data\n  if (!Array.isArray(message) || message.length < 2) {\n    // Ignore - this message is not for us.\n    return\n  }\n  var messageId = message[0]\n  var error = message[1]\n  var result = message[2]\n\n  var callback = self._callbacks[messageId]\n\n  if (!callback) {\n    // Ignore - user might have created multiple PromiseWorkers.\n    // This message is not for us.\n    return\n  }\n\n  delete self._callbacks[messageId]\n  callback(error, result)\n}\n\nfunction PromiseWorker (worker) {\n  var self = this\n  self._worker = worker\n  self._callbacks = {}\n\n  worker.addEventListener('message', function (e) {\n    onMessage(self, e)\n  })\n}\n\nPromiseWorker.prototype.postMessage = function (userMessage) {\n  var self = this\n  var messageId = messageIds++\n\n  var messageToSend = [messageId, userMessage]\n\n  return new Promise(function (resolve, reject) {\n    self._callbacks[messageId] = function (error, result) {\n      if (error) {\n        return reject(new Error(error.message))\n      }\n      resolve(result)\n    }\n\n    /* istanbul ignore if */\n    if (typeof self._worker.controller !== 'undefined') {\n      // service worker, use MessageChannels because e.source is broken in Chrome < 51:\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=543198\n      var channel = new MessageChannel()\n      channel.port1.onmessage = function (e) {\n        onMessage(self, e)\n      }\n      self._worker.controller.postMessage(messageToSend, [channel.port2])\n    } else {\n      // web worker\n      self._worker.postMessage(messageToSend)\n    }\n  })\n}\n\nmodule.exports = PromiseWorker\n","import PromiseWorker from \"promise-worker\";\r\nimport { CmdMessage } from \"./message.interface\";\r\n// @ts-ignore\r\n// import WasmWorkerURL from './wasm.worker?url&inline';\r\n// import WasmWorkerURL from './worker?url&inline';\r\n// import WasmWorker from 'web-worker:./wasm.worker.ts';\r\n// import WasmWorker from './wasm.worker?worker&inline';\r\n\r\n/**\r\n * WebAssembly 代理对象\r\n */\r\nexport interface QuickWasmManager {\r\n    /**\r\n     * 传入 ArrayBuffer, 在 WebAssembly 中创建相应的堆指针, 同时写入 data 中的数据\r\n     * @param data 传入的数据\r\n     * @returns 堆指针\r\n     */\r\n    createHEAP: (data: ArrayBuffer) => Promise<number>;\r\n    /**\r\n     * 传入 Int8Array, 在 WebAssembly 中创建相应的堆指针, 同时写入 data 中的数据\r\n     * @param data 传入的数据\r\n     * @returns 堆指针\r\n     */\r\n    createHEAP8: (data: Int8Array) => Promise<number>;\r\n    /**\r\n     * 传入 Int16Array, 在 WebAssembly 中创建相应的堆指针, 同时写入 data 中的数据\r\n     * @param data 传入的数据\r\n     * @returns 堆指针\r\n     */\r\n    createHEAP16: (data: Int16Array) => Promise<number>;\r\n    /**\r\n     * 传入 Int32Array, 在 WebAssembly 中创建相应的堆指针, 同时写入 data 中的数据\r\n     * @param data 传入的数据\r\n     * @returns 堆指针\r\n     */\r\n    createHEAP32: (data: Int32Array) => Promise<number>;\r\n    /**\r\n     * 传入 Float32Array, 在 WebAssembly 中创建相应的堆指针, 同时写入 data 中的数据\r\n     * @param data 传入的数据\r\n     * @returns 堆指针\r\n     */\r\n    createHEAPF32: (data: Float32Array) => Promise<number>;\r\n    /**\r\n     * 传入 Float64Array, 在 WebAssembly 中创建相应的堆指针, 同时写入 data 中的数据\r\n     * @param data 传入的数据\r\n     * @returns 堆指针\r\n     */\r\n    createHEAPF64: (data: Float64Array) => Promise<number>;\r\n    /**\r\n     * 传入 Uint8Array, 在 WebAssembly 中创建相应的堆指针, 同时写入 data 中的数据\r\n     * @param data 传入的数据\r\n     * @returns 堆指针\r\n     */\r\n    createHEAPU8: (data: Uint8Array) => Promise<number>;\r\n    /**\r\n     * 传入 Uint16Array, 在 WebAssembly 中创建相应的堆指针, 同时写入 data 中的数据\r\n     * @param data 传入的数据\r\n     * @returns 堆指针\r\n     */\r\n    createHEAPU16: (data: Uint16Array) => Promise<number>;\r\n    /**\r\n     * 传入 Uint32Array, 在 WebAssembly 中创建相应的堆指针, 同时写入 data 中的数据\r\n     * @param data 传入的数据\r\n     * @returns 堆指针\r\n     */\r\n    createHEAPU32: (data: Uint32Array) => Promise<number>;\r\n    /**\r\n     * 传入堆指针, 释放内存\r\n     * @param ptr 堆指针\r\n     * @returns true |false\r\n     */\r\n    freeHEAP: (ptr: number)=> Promise<boolean>;\r\n    /**\r\n     * 读取 WebAssembly 中指向 ptr 的 bytes 个字节的数据\r\n     * @param ptr 堆指针\r\n     * @param bytes 字节数\r\n     * @returns ArrayBuffer 数据\r\n     */\r\n    getHEAP: (ptr: number, bytes: number) => Promise<ArrayBuffer>;\r\n    /**\r\n     * 读取 WebAssembly 中指向 ptr 的长度为 len 的 Int8Array 数据\r\n     * @param ptr 堆指针\r\n     * @param len 元素个数\r\n     * @returns Int8Array 数据\r\n     */\r\n    getHEAP8: (ptr: number, len: number) => Promise<Int8Array>;\r\n    /**\r\n     * 读取 WebAssembly 中指向 ptr 的长度为 len 的 Int16Array 数据\r\n     * @param ptr 堆指针\r\n     * @param len 元素个数\r\n     * @returns Int16Array 数据\r\n     */\r\n    getHEAP16: (ptr: number, len: number) => Promise<Int16Array>;\r\n    /**\r\n     * 读取 WebAssembly 中指向 ptr 的长度为 len 的 Int32Array 数据\r\n     * @param ptr 堆指针\r\n     * @param len 元素个数\r\n     * @returns Int32Array 数据\r\n     */\r\n    getHEAP32: (ptr: number, len: number) => Promise<Int32Array>;\r\n    /**\r\n     * 读取 WebAssembly 中指向 ptr 的长度为 len 的 Float32Array 数据\r\n     * @param ptr 堆指针\r\n     * @param len 元素个数\r\n     * @returns Float32Array 数据\r\n     */\r\n    getHEAPF32: (ptr: number, len: number) => Promise<Float32Array>;\r\n    /**\r\n     * 读取 WebAssembly 中指向 ptr 的长度为 len 的 Float64Array 数据\r\n     * @param ptr 堆指针\r\n     * @param len 元素个数\r\n     * @returns Float64Array 数据\r\n     */\r\n    getHEAPF64: (ptr: number, len: number) => Promise<Float64Array>;\r\n    /**\r\n     * 读取 WebAssembly 中指向 ptr 的长度为 len 的 Uint8Array 数据\r\n     * @param ptr 堆指针\r\n     * @param len 元素个数\r\n     * @returns Uint8Array 数据\r\n     */\r\n    getHEAPU8: (ptr: number, len: number) => Promise<Uint8Array>;\r\n    /**\r\n     * 读取 WebAssembly 中指向 ptr 的长度为 len 的 Uint16Array 数据\r\n     * @param ptr 堆指针\r\n     * @param len 元素个数\r\n     * @returns Uint16Array 数据\r\n     */\r\n    getHEAPU16: (ptr: number, len: number) => Promise<Uint16Array>;\r\n    /**\r\n     * 读取 WebAssembly 中指向 ptr 的长度为 len 的 Uint32Array 数据\r\n     * @param ptr 堆指针\r\n     * @param len 元素个数\r\n     * @returns Uint32Array 数据\r\n     */\r\n    getHEAPU32: (ptr: number, len: number) => Promise<Uint32Array>;\r\n    /**\r\n     * 向外暴露的 WebAssembly API, 从 Emscripten 编译的 WebAssembly 文件资源中得到\r\n     */\r\n    [key: string]:  (...funcArgs: any[]) => Promise<any>;\r\n}\r\n\r\n/**\r\n * 构建 WebAssembly 代理对象的工厂类\r\n */\r\nexport class QuickWebAssemblyFactory {\r\n    \r\n    constructor() {}\r\n\r\n    /**\r\n     * 传入 WebAssembly 资源, 构建代理对象\r\n     * @param moduleUrl 由 Emscripten 编译的 JS 文件资源路径, 如果是相对路径则会相对于当前页面的 location 请求资源\r\n     * @param wasmUrl 由 Emscripten 编译的 WebAssembly(.wasm) 文件资源路径, 如果是相对路径则会相对于当前页面的 location 请求资源\r\n     * @returns \r\n     */\r\n    async createManager(moduleUrl: string, wasmUrl?: string): Promise<QuickWasmManager> {\r\n        const TransformUrl = () => {\r\n            const a = document.createElement(\"a\");\r\n            a.href = moduleUrl;\r\n            moduleUrl = a.href;\r\n            if (wasmUrl) {\r\n                a.href = wasmUrl;\r\n                wasmUrl = a.href;\r\n            }\r\n        }\r\n        TransformUrl();\r\n        \r\n        let msg: CmdMessage;\r\n        // const worker = new WasmWorker();\r\n        // const worker = new Worker(WasmWorkerURL)\r\n        // const worker = new Worker(new URL('./wasm.worker', import.meta.url), {\r\n        //     type: 'module',\r\n        // })\r\n        const worker = new Worker(new URL('./worker.js', import.meta.url))\r\n        const promiseWorker = new PromiseWorker(worker);\r\n        const manager: QuickWasmManager = {\r\n            createHEAP: async (data: ArrayBuffer): Promise<number> => {\r\n                msg = { cmd: \"createHeap\", args: [new Int8Array(data)]}\r\n                return await promiseWorker.postMessage(msg);\r\n            },\r\n            createHEAP8: async (data: Int8Array): Promise<number> => {\r\n                msg = { cmd: \"createHeap\", args: [data]}\r\n                return await promiseWorker.postMessage(msg);\r\n            },\r\n            createHEAP16: async (data: Int16Array): Promise<number> => {\r\n                msg = { cmd: \"createHeap\", args: [new Int8Array(data.buffer)]}\r\n                return await promiseWorker.postMessage(msg);\r\n            },\r\n            createHEAP32: async (data: Int32Array): Promise<number> => {\r\n                msg = { cmd: \"createHeap\", args: [new Int8Array(data.buffer)]}\r\n                return await promiseWorker.postMessage(msg);\r\n            },\r\n            createHEAPF32: async (data: Float32Array): Promise<number> => {\r\n                msg = { cmd: \"createHeap\", args: [new Int8Array(data.buffer)]}\r\n                return await promiseWorker.postMessage(msg);\r\n            },\r\n            createHEAPF64: async (data: Float64Array): Promise<number> => {\r\n                msg = { cmd: \"createHeap\", args: [new Int8Array(data.buffer)]}\r\n                return await promiseWorker.postMessage(msg);\r\n            },\r\n            createHEAPU8: async (data: Uint8Array): Promise<number> => {\r\n                msg = { cmd: \"createHeap\", args: [new Int8Array(data.buffer)]}\r\n                return await promiseWorker.postMessage(msg);\r\n            },\r\n            createHEAPU16: async (data: Uint16Array): Promise<number> => {\r\n                msg = { cmd: \"createHeap\", args: [new Int8Array(data.buffer)]}\r\n                return await promiseWorker.postMessage(msg);\r\n            },\r\n            createHEAPU32: async (data: Uint32Array): Promise<number> => {\r\n                msg = { cmd: \"createHeap\", args: [new Int8Array(data.buffer)]}\r\n                return await promiseWorker.postMessage(msg);\r\n            },\r\n            freeHEAP: async (ptr: number): Promise<boolean> => {\r\n                msg = { cmd: \"freeHeap\", args: [ptr]}\r\n                return await promiseWorker.postMessage(msg);\r\n            },\r\n            getHEAP: async (ptr: number, bytes: number): Promise<ArrayBuffer> => {\r\n                msg = { cmd: \"getHeap\", args: [ptr, bytes]}\r\n                return (await promiseWorker.postMessage(msg)).buffer;\r\n            },\r\n            getHEAP8: async (ptr: number, len: number): Promise<Int8Array> => {\r\n                msg = { cmd: \"getHeap\", args: [ptr, len]}\r\n                return await promiseWorker.postMessage(msg);\r\n            },\r\n            getHEAP16: async (ptr: number, len: number): Promise<Int16Array> => {\r\n                msg = { cmd: \"getHeap\", args: [ptr, len * 2]}\r\n                return new Int16Array((await promiseWorker.postMessage(msg)).buffer);\r\n            },\r\n            getHEAP32: async (ptr: number, len: number): Promise<Int32Array> => {\r\n                msg = { cmd: \"getHeap\", args: [ptr, len * 4]}\r\n                return new Int32Array((await promiseWorker.postMessage(msg)).buffer);\r\n            },\r\n            getHEAPF32: async (ptr: number, len: number): Promise<Float32Array> => {\r\n                msg = { cmd: \"getHeap\", args: [ptr, len * 4]}\r\n                return new Float32Array((await promiseWorker.postMessage(msg)).buffer);\r\n            },\r\n            getHEAPF64: async (ptr: number, len: number): Promise<Float64Array> => {\r\n                msg = { cmd: \"getHeap\", args: [ptr, len * 8]}\r\n                return new Float64Array((await promiseWorker.postMessage(msg)).buffer);\r\n            },\r\n            getHEAPU8: async (ptr: number, len: number): Promise<Uint8Array> => {\r\n                msg = { cmd: \"getHeap\", args: [ptr, len]}\r\n                return new Uint8Array((await promiseWorker.postMessage(msg)).buffer);\r\n            },\r\n            getHEAPU16: async (ptr: number, len: number): Promise<Uint16Array> => {\r\n                msg = { cmd: \"getHeap\", args: [ptr, len * 2]}\r\n                return new Uint16Array((await promiseWorker.postMessage(msg)).buffer);\r\n            },\r\n            getHEAPU32: async (ptr: number, len: number): Promise<Uint32Array> => {\r\n                msg = { cmd: \"getHeap\", args: [ptr, len * 4]}\r\n                return new Uint32Array((await promiseWorker.postMessage(msg)).buffer);\r\n            },\r\n        };\r\n        msg = { cmd: \"load\", args: [moduleUrl, wasmUrl]}\r\n        await promiseWorker.postMessage(msg);\r\n        msg = { cmd: \"getKeys\" }\r\n        const keys: string[] = await promiseWorker.postMessage(msg);\r\n        keys.forEach(k => {\r\n            manager[k] = async (...funcArgs: any[]) => {\r\n                const msg: CmdMessage = { cmd: \"call\", args: [k, funcArgs]}\r\n                return await promiseWorker.postMessage(msg);\r\n            }\r\n        });\r\n        return manager;\r\n    }\r\n}"],"names":["messageIds","onMessage","self","message","messageId","error","result","callback","PromiseWorker","worker","e","userMessage","messageToSend","resolve","reject","channel","promiseWorker","QuickWebAssemblyFactory","moduleUrl","wasmUrl","a","msg","manager","data","ptr","bytes","len","k","funcArgs"],"mappings":"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","x_google_ignoreList":[0]}