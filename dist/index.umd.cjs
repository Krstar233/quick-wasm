!function(e,a){"object"==typeof exports&&"undefined"!=typeof module?module.exports=a():"function"==typeof define&&define.amd?define(a):(e="undefined"!=typeof globalThis?globalThis:e||self).QuickWasmJS=a()}(this,(function(){"use strict";function e(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var a,t;const r=e(function(){if(t)return a;t=1;var e=0;function r(e,a){var t=a.data;if(Array.isArray(t)&&!(t.length<2)){var r=t[0],s=t[1],n=t[2],c=e._callbacks[r];c&&(delete e._callbacks[r],c(s,n))}}function s(e){var a=this;a._worker=e,a._callbacks={},e.addEventListener("message",(function(e){r(a,e)}))}return s.prototype.postMessage=function(a){var t=this,s=e++,n=[s,a];return new Promise((function(e,a){if(t._callbacks[s]=function(t,r){if(t)return a(new Error(t.message));e(r)},void 0!==t._worker.controller){var c=new MessageChannel;c.port1.onmessage=function(e){r(t,e)},t._worker.controller.postMessage(n,[c.port2])}else t._worker.postMessage(n)}))},a=s}());async function s(e,a,t){if(!window)throw new Error("load() should be run in the main thread");if(e.loaded)return;const r=window.exports;window.exports=Object.assign({},r),await import(
/* @vite-ignore */
a);const s=window.exports.Module;window.exports=r,e.loaded||(e.M=await s({locateFile:e=>e.endsWith("wasm")&&t?t:e,onRuntimeInitialized:()=>{e.loaded=!0}}))}class n{constructor(){this.loaded=!1,this.load=s}loadCheck(){if(!this.loaded)throw new Error("WebAssembly is not loaded!")}call(e,a){const t=[],r=a.map((e=>{if("string"==typeof e){const a=this.M._malloc(2*e.length);return this.M.stringToUTF8(e,a,2*e.length),t.push(a),a}return e})),s=this.M["_"+e](...r)||!0;return t.forEach((e=>{this.M._free(e)})),s}getKeys(){const e=[];for(const a of Object.keys(this.M))a.startsWith("_")&&e.push(a.slice(1));return e}createHeap(e){const a=this.M._malloc(e.byteLength);return this.M.HEAP8.set(e,a),a}freeHeap(e){return this.M._free(e),!0}getHeap(e,a){return new Int8Array(this.M.HEAP8.subarray(e,e+a))}postMessage(e){switch(e.cmd){case"load":{const{args:a}=e;return s(this,a[0],a[1])}case"call":{this.loadCheck();const{args:a}=e,t=a[0],r=a[1];return this.call(t,r)}case"getKeys":return this.loadCheck(),this.getKeys();case"createHeap":{this.loadCheck();const{args:a}=e,t=a[0];return this.createHeap(t)}case"freeHeap":{this.loadCheck();const{args:a}=e,t=a[0];return this.freeHeap(t)}case"getHeap":{this.loadCheck();const{args:a}=e,t=a[0],r=a[1];return this.getHeap(t,r)}default:throw new Error("Unknown Message.")}}}const c=e=>{const a=document.createElement("a");return a.href=e,e=a.href};return class{constructor(){}static async create({moduleUrl:e,wasmUrl:a}){let t;e&&(e=c(e)),a&&(a=c(a));const r=new n,s={createHEAP:e=>(t={cmd:"createHeap",args:[new Int8Array(e)]},r.postMessage(t)),createHEAP8:e=>(t={cmd:"createHeap",args:[e]},r.postMessage(t)),createHEAP16:e=>(t={cmd:"createHeap",args:[new Int8Array(e.buffer)]},r.postMessage(t)),createHEAP32:e=>(t={cmd:"createHeap",args:[new Int8Array(e.buffer)]},r.postMessage(t)),createHEAPF32:e=>(t={cmd:"createHeap",args:[new Int8Array(e.buffer)]},r.postMessage(t)),createHEAPF64:e=>(t={cmd:"createHeap",args:[new Int8Array(e.buffer)]},r.postMessage(t)),createHEAPU8:e=>(t={cmd:"createHeap",args:[new Int8Array(e.buffer)]},r.postMessage(t)),createHEAPU16:e=>(t={cmd:"createHeap",args:[new Int8Array(e.buffer)]},r.postMessage(t)),createHEAPU32:e=>(t={cmd:"createHeap",args:[new Int8Array(e.buffer)]},r.postMessage(t)),freeHEAP:e=>(t={cmd:"freeHeap",args:[e]},r.postMessage(t)),getHEAP:(e,a)=>(t={cmd:"getHeap",args:[e,a]},r.postMessage(t).buffer),getHEAP8:(e,a)=>(t={cmd:"getHeap",args:[e,a]},r.postMessage(t)),getHEAP16:(e,a)=>(t={cmd:"getHeap",args:[e,2*a]},new Int16Array(r.postMessage(t).buffer)),getHEAP32:(e,a)=>(t={cmd:"getHeap",args:[e,4*a]},new Int32Array(r.postMessage(t).buffer)),getHEAPF32:(e,a)=>(t={cmd:"getHeap",args:[e,4*a]},new Float32Array(r.postMessage(t).buffer)),getHEAPF64:(e,a)=>(t={cmd:"getHeap",args:[e,8*a]},new Float64Array(r.postMessage(t).buffer)),getHEAPU8:(e,a)=>(t={cmd:"getHeap",args:[e,a]},new Uint8Array(r.postMessage(t).buffer)),getHEAPU16:(e,a)=>(t={cmd:"getHeap",args:[e,2*a]},new Uint16Array(r.postMessage(t).buffer)),getHEAPU32:(e,a)=>(t={cmd:"getHeap",args:[e,4*a]},new Uint32Array(r.postMessage(t).buffer))};t={cmd:"load",args:[e,a]},await r.postMessage(t),t={cmd:"getKeys"};return r.postMessage(t).forEach((e=>{s[e]=(...a)=>{const t={cmd:"call",args:[e,a]};return r.postMessage(t)}})),s}static async createInWorker({moduleUrl:e,wasmUrl:a,workerUrl:t,worker:s}){let n,o;if(e&&(e=c(e)),a&&(a=c(a)),t&&(t=c(t)),s)o=s;else{if(!t)throw new Error("cannot not run in worker, no workerUrl resource!");o=new Worker(t)}const g=new r(o),i={createHEAP:async e=>(n={cmd:"createHeap",args:[new Int8Array(e)]},await g.postMessage(n)),createHEAP8:async e=>(n={cmd:"createHeap",args:[e]},await g.postMessage(n)),createHEAP16:async e=>(n={cmd:"createHeap",args:[new Int8Array(e.buffer)]},await g.postMessage(n)),createHEAP32:async e=>(n={cmd:"createHeap",args:[new Int8Array(e.buffer)]},await g.postMessage(n)),createHEAPF32:async e=>(n={cmd:"createHeap",args:[new Int8Array(e.buffer)]},await g.postMessage(n)),createHEAPF64:async e=>(n={cmd:"createHeap",args:[new Int8Array(e.buffer)]},await g.postMessage(n)),createHEAPU8:async e=>(n={cmd:"createHeap",args:[new Int8Array(e.buffer)]},await g.postMessage(n)),createHEAPU16:async e=>(n={cmd:"createHeap",args:[new Int8Array(e.buffer)]},await g.postMessage(n)),createHEAPU32:async e=>(n={cmd:"createHeap",args:[new Int8Array(e.buffer)]},await g.postMessage(n)),freeHEAP:async e=>(n={cmd:"freeHeap",args:[e]},await g.postMessage(n)),getHEAP:async(e,a)=>(n={cmd:"getHeap",args:[e,a]},(await g.postMessage(n)).buffer),getHEAP8:async(e,a)=>(n={cmd:"getHeap",args:[e,a]},await g.postMessage(n)),getHEAP16:async(e,a)=>(n={cmd:"getHeap",args:[e,2*a]},new Int16Array((await g.postMessage(n)).buffer)),getHEAP32:async(e,a)=>(n={cmd:"getHeap",args:[e,4*a]},new Int32Array((await g.postMessage(n)).buffer)),getHEAPF32:async(e,a)=>(n={cmd:"getHeap",args:[e,4*a]},new Float32Array((await g.postMessage(n)).buffer)),getHEAPF64:async(e,a)=>(n={cmd:"getHeap",args:[e,8*a]},new Float64Array((await g.postMessage(n)).buffer)),getHEAPU8:async(e,a)=>(n={cmd:"getHeap",args:[e,a]},new Uint8Array((await g.postMessage(n)).buffer)),getHEAPU16:async(e,a)=>(n={cmd:"getHeap",args:[e,2*a]},new Uint16Array((await g.postMessage(n)).buffer)),getHEAPU32:async(e,a)=>(n={cmd:"getHeap",args:[e,4*a]},new Uint32Array((await g.postMessage(n)).buffer))};n={cmd:"load",args:[e,a]},await g.postMessage(n),n={cmd:"getKeys"};return(await g.postMessage(n)).forEach((e=>{i[e]=async(...a)=>{const t={cmd:"call",args:[e,a]};return await g.postMessage(t)}})),i}}}));
